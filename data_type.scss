$foundation-palette: (
    primary: #E44347,
    mars: #D7525C,
    saturn: #E4B884,
    neptune: #5147D7
);

.mars {
    color: map-get($foundation-palette, mars);
}

$site_max_width: 960px;
$font_color: #333;
$link_color: #00c;
$font_family: Arial, sans-serif;
$font_size: 16px;
$line_height: percentage(20px / $font_size);

body {
    color: $font_color;

    // Property Nesting
    font: {
        size: $font_size;
        family: $font_family;
    }

    line-height: $line_height;
}

//global variable
$width: 960px;

#main {
    // local variable
    $color: #333; // $color: #333 !global; > global variable
    width: $width + 10;
    margin: 20px auto;
    max-width: $site_max_width;
    section {
        p {
            color: $color;

            a:link {
                color: $color;
            }
        }
    }
}

footer {
    width: $width + 20in;
    margin: 0 auto;
}

// width: 5% + 10% (o) : relative + same unit
// width: 10px + 5in (o)
// width: calc(25% - 5px) (o)
// width: 5% + 5em (x) : relative
// width: 10px + 5em (x) : relative

p {
    /*
    font: font-style font-variant font-weight font-size/line-height font-family
    */
    font: italic bold 12px/30px Georgia, serif;

    /*
    border-top-left-radius: 10px 20px;
    border-top-right-radius: 20px;
    border-bottom-right-radius: 10px 20px;
    border-bottom-left-radius: 20px;
    */
    border-radius: 10px 20px/20px;


    $width: 1000px;
    /* div operator example */
    width: $width / 2; /* for variables */
    height: (500px / 2); /* in () */
    margin-left: 5px + 8px / 2px; /* combination with other operators */
}

p.p2 {
    $font-size: 12px;
    $line-height: 30px;
    /* exmple for using variable as the css expression - #{} */
    font: #{$font-size}/#{$line-height}; // 12px/30px
}


p {
    color: #010203 + #040506;
    // > #050709
}

p {
    color: #010203 * 2;
}

p {
    color: rgba(255, 0, 0, 0.75) + rgba(0, 255, 0, 0.75);
    // color: rgba(255, 255, 0, 0.75)
    // alpha keep the original value.
}

$translucent-red: rgba(255, 0, 0, 0.5);
p {
    color: opacify($translucent-red, 0.3);
    // alpha : 0.8
    background-color: transparentize($translucent-red, 0.25);
    // alpha : 0.25
}


p {
    cursor: e + -resize; // e-resize
}

p:before {
    content: 'Foo ' + Bar; // Foo Bar
    font-family: sans- + 'serif'; // sans-serif
}


// && || !
// if @if


// #{} : interpolation
$name: foo;
$attr: border;
p.#{$name} {
    #{$attr}-color: blue;
}

// & : expression of the parent element
a {
    color: #ccc;
    &.home {
        color: #f0f;
    }
    &:hover {
        text-decoration: none;
    }
    // & > span (x) : do not use & for the children element
    > span {
        color: blue;
    }
    span {
        color: red;
    }
}



$content: null;
// if $content has null/empty then use this value to default
$content: "None-null content" !default;

#main {
    content: $content; // "None-null content"
}


